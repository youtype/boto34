[project]
name = "boto34"
version = "0.1.0"
description = "Type annotated wrapper for boto3, aiobotocore, and aioboto3."
readme = "README.md"
authors = [{ name = "Vlad Emelianov", email = "vlad.emelianov.nz@gmail.com" }]
requires-python = ">=3.8"
dependencies = ["typing-extensions"]

[project.optional-dependencies]
boto3 = ["boto3", "types-boto3-lite", "types-boto3-full"]
aioboto3 = ["aioboto3", "types-aioboto3-lite", "types-aiobotocore-full"]
aiobotocore = [
    "aiobotocore",
    "types-aiobotocore-lite",
    "types-aiobotocore-full",
]

[dependency-groups]
dev = [
    "boto3",
    "pyright",
    "mypy",
    "pytest",
    "types-boto3-lite",
    "types-boto3-full",
    "types-aiobotocore-lite",
    "types-aioboto3-lite",
    "types-aiobotocore-full",
    "aiobotocore",
    "aioboto3",
]

[tool.uv]
default-groups = ["dev"]
package = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pyright]
include = ["src"]
exclude = ["tests"]
ignore = [
    ".venv",
    "**/__pycache__",
    "**/build",
    "typestubs",
    "examples",
    "integration",
    "**/test_*.py",
]
typeCheckingMode = "strict"
reportMissingImports = "error"
reportMissingTypeStubs = "error"
reportMissingTypeArgument = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportUnknownParameterType = "error"
pythonVersion = "3.8"


[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_ignores = false
disallow_untyped_defs = true
ignore_missing_imports = true
ignore_errors = false


[tool.ruff]
exclude = [
    ".eggs",
    ".git",
    ".git-rewrite",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "build",
    "dist",
]

line-length = 100
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ARG002",  # unused-argument
    "COM812",  # missing-trailing-comma
    "D107",    # undocumented-public-init
    "D200",    # fits-on-one-line
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "D406",    # new-line-after-section-name
    "D407",    # dashed-underline-after-section
    "D413",    # blank-line-after-last-section
    "D417",    # undocumented-param
    "DOC",     # pydoclint
    "EM",      # flake8-errmsg
    "ERA001",  # commented-out-code
    "FIX001",  # line-contains-fixme
    "G004",    # logging-f-string
    "INP001",  # implicit-namespace-package
    "ISC001",  # implicit-str-concat
    "PERF203", # try-except-in-loop
    "PLR0904", # too-many-public-methods
    "PLR0913", # too-many-arguments
    "PLR6301", # no-self-use
    "S404",    # suspicious-subprocess-import
    "S603",    # subprocess-without-shell-equals-true
    "TD",      # flake8-todos
    "TRY003",  # raise-vanilla-args
    "PLR0911", # too-many-return-statements
    "D",       # flake8-docstrings
    "TC",      # flake8-type-checking
    "FBT",     # flake8-boolean-trap
]
fixable = ["ALL"]
unfixable = ["B"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
exclude = ["*.pyi", "examples/*", "integration/*"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.ruff.lint.flake8-copyright]
# author = "Vlad Emelianov"
min-file-size = 200
notice-rgx = "(?i)Copyright \\d{4}"
